snippet     dijkstra
abbr        get shortest path
	# ダイクストラ法による単一始点最短経路問題ソルバ
	# @param [Array]   g エッジの Hash {to: 行き先ノード番号, cost: コスト} の二重配列で表されるグラフ
	# @param [Integer] s 開始ノード番号
	# @return [Array]  各ノードまでの合計コストの格納された配列
	# g は辺の集合の配列である。
	# g_i には i 番ノードから生えているエッジの集合が配列として格納される。
	# 返り値は d_i に i 番ノードまでの所要合計コストが格納される。
	def dijkstra(g, s)
		def penq(pq, val)
			pq << val
			cd = pq.size
			pr = cd / 2
			until pr.zero? || (pq[pr - 1] <=> pq[cd - 1]) < 0
				pq[pr - 1], pq[cd - 1] = pq[cd - 1], pq[pr - 1]
				cd = pr
				pr = cd / 2
			end
		end
		def pdeq(pq)
			pq[0], pq[-1] = pq[-1], pq[0]
			rs = pq.delete_at(-1)
			unless pq.empty?
				pr = 1
				cd = [pr * 2, pr * 2 + 1].select { |i| pq[i - 1] }.min_by { |i| pq[i - 1] }
				until cd.nil? || (pq[pr - 1] <=> pq[cd - 1]) < 0
					pq[pr - 1], pq[cd - 1] = pq[cd - 1], pq[pr - 1]
					pr = cd
					cd = [pr * 2, pr * 2 + 1].select { |i| pq[i - 1] }.min_by { |i| pq[i - 1] }
				end
			end
			rs
		end
	
		pq = []
		d = Array.new(g.size) { Float::INFINITY }
		d[s] = 0
		penq(pq, [0, s])
		until pq.empty?
			v_cost, v = pdeq(pq)
			next if d[v] < v_cost
			g[v].each do |e|
				if d[e[:to]] > d[v] + e[:cost]
					d[e[:to]] = d[v] + e[:cost]
					penq(pq, [d[e[:to]], e[:to]])
				end
			end
		end
		d
	end
